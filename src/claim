#!/usr/bin/env node

var fs = require('fs')
var bitcore = require('bitcore-lib')
var jsonldSignatures = require('jsonld-signatures')
var program = require('commander')
var moment = require('moment')
var canonicalJson = require('json-stable-stringify')
var lightsaber = require('lightsaber')

var run = lightsaber.run
var d = lightsaber.d

var notarize = require('./notarize.js').notarize

function list (val) {
  return val.split(/,\s*/)
}

var opts = program
  .option('-c, --creator <creator>', 'DID or URL of claim creator')
  .option('-t, --target <target>', 'DID or URI of claim target')
  .option('-p, --private-key <key>', 'Bitcoin private key')
  .option('-s, --claim-summary <summary>', 'Summary of claim type')
  .option('-t, --tags <tag1,tag2>', 'Add tags', list)
  .parse(process.argv)

opts.tags = opts.tags || []
opts.tags.push("Claim")

var claim = {
  "@context": "https://w3id.org/credentials/v1",
  type: opts.tags,
  issuer: opts.creator,
  issued: moment().format(),
  claim: {
    id: opts.target,
    summary: opts.claimSummary
  }
}

console.log("\ninput:")
console.log(JSON.stringify(claim, null, 4))

var result
jsonldSignatures.promises.sign(claim, {
  privateKeyWif: opts.privateKey,
  algorithm: 'sha256-ecdsa-secp256k1-2016',
  domain: 'example.com',
  creator: 'sha256-ecdsa-secp256k1-public-key:' + new bitcore.PrivateKey(opts.privateKey).toPublicKey()
}).then(function (_result) {
  result = _result
  var json = canonicalJson(result)
  console.log("\n\njson to timestamp:")
  console.log(json)
  return notarize(json)
}).then(function (openTimestamp) {
  result.openTimestamp = openTimestamp
  console.log("\n\nresult:")
  console.log(JSON.stringify(result, null, 4))
  fs.writeFileSync('claims/xyz', canonicalJson(result))
  var id = run("ipfs add -q claims/xyz").toString().trim()
  console.log("open https://ipfs.io/ipfs/" + id)
}).catch(function (error) {
  console.error(error.stack)
  process.exit(1)
})
